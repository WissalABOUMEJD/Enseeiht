-- @path PetriNet=/simplePDL2PetriNetAtl2/PetriNet.ecore
-- @path simplePDL=/miniprojet.simplePDL/simplePDL.ecore

module simplePDL2PetriNet;
create OUT : PetriNet from IN : simplePDL;

-- Obtenir le processus qui contient ce process element.
helper context simplePDL!ProcessElement
def: getProcess(): simplePDL!Process =
	simplePDL!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

rule Process2PetriNet {
	from p: simplePDL!Process
	to pn: PetriNet!PetriNet (name <- p.name)
}

rule WS2PetriNet {
    from workSequence: simplePDL!WorkSequence
    
    to
        e_first_second: PetriNet!Arc(
            source <-   if (workSequence.linkType = #startToFinish or workSequence.linkType = #startToStart) then
                            thisModule.resolveTemp(workSequence.predecessor, 'placeStarted')
                        else
                              thisModule.resolveTemp(workSequence.predecessor, 'placeFinished')
                        endif,
            target <-        if (workSequence.linkType = #startToStart or workSequence.linkType = #finishToStart) then
                            thisModule.resolveTemp(workSequence.successor, 'transitionStart')
                        else
                            thisModule.resolveTemp(workSequence.successor, 'transitionFinish')
                        endif,
            jetons <- 1,
            kind <- #read,
			net <- workSequence.successor.getProcess()
			)
}

rule WD2PetriNet {
	from wd: simplePDL!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		placeRunning: PetriNet!Place(
            name <- wd.name + '_running',
            jetons <- 0,
			net <- wd.getProcess()),
		placeReady: PetriNet!Place(
			name <- wd.name + '_ready',
			jetons <- 1,
			net <- wd.getProcess()),
		placeStarted: PetriNet!Place(
            name <- wd.name + '_started',
            jetons <- 0,
			net <- wd.getProcess()),
        placeFinished: PetriNet!Place(
            name <- wd.name + '_finished',
            jetons <- 0,
			net <- wd.getProcess()),
		transitionFinish: PetriNet!Transition(
            name <- wd.name + '_finish',
			net <- wd.getProcess()),
        transitionStart: PetriNet!Transition(
            name <- wd.name + '_start',
			net <- wd.getProcess()),
        arcReadyStart: PetriNet!Arc(
            source <- placeReady,
            target <- transitionStart,
            jetons <- 1,
            kind <- #normal),     
        arcStartRunning: PetriNet!Arc(
            source <- transitionStart,
            target <- placeRunning,
            jetons <- 1,
            kind <- #normal,
			net <- wd.getProcess()),
		arcStartStarted: PetriNet!Arc(
            source <- transitionStart,
            target <- placeStarted,
            jetons <- 1,
            kind <- #normal,
			net <- wd.getProcess()),
        arcFinishFinished: PetriNet!Arc(
            source <- transitionFinish,
            target <- placeFinished,
            jetons <- 1,
            kind <- #normal,
			net <- wd.getProcess()),
        arcRunningFinish: PetriNet!Arc(
            source <- placeRunning,
            target <- transitionFinish,
            jetons <- 1,
            kind <- #normal,
			net <- wd.getProcess())
        
}

rule give2PetriNet {
	from give: simplePDL!Amount
	to
		arcPrRessource: PetriNet!Arc(
			source <- give.amount,
			target <- thisModule.resolveTemp(give.activity, 'transitionStart'),
			jetons <- give.value,
			kind <- #normal,
			net <- give.amount.getProcess()
		),
		arcDoRessource: PetriNet!Arc(
			source <- give.amount,
			target <- thisModule.resolveTemp(give.activity, 'transitionFinish'),
			jetons <- give.value,
			kind <- #normal,
			net <- give.amount.getProcess()
		)
}

rule Ressource2PetriNet {
	from ressource: simplePDL!Ressource
	to
		p_ressource: PetriNet!Place(
			name <- ressource.name,
			jetons <- ressource.quantity,
			net <- ressource.getProcess()
			)
}

