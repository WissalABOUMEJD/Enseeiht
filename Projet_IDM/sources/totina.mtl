[comment encoding = UTF-8 /]
[module totina('http://petrinet')]

[template public totina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name +'.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let places : OrderedSet(Place) = aPetriNet.getPlaces() ]
		[for (p : Place | places)]
pl [p.name/] ([p.jetons/])
		[/for]
[/let]
[let transition : OrderedSet(Transition) = aPetriNet.getTransitions() ]
		[for (t : Transition | transition)]
tr [t.name/] [InArcs(t.getSources())/] -> [OutArcs(t.getTargets())/]
		[/for]
[/let]
[/file]
[/template]

[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
	p.petriNetElements->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]

[query public getTargets(t: Transition) : OrderedSet(Arc) = 
	t.arcOut->select( e | e.oclIsTypeOf(Arc) )
		->collect( e | e.oclAsType(Arc) )
		->asOrderedSet()
/]

[query public getSources(t: Transition) : OrderedSet(Arc) = 
	t.arcIn->select( e | e.oclIsTypeOf(Arc) )
		->collect( e | e.oclAsType(Arc) )
		->asOrderedSet()
/]

[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
	p.petriNetElements->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]


[template public InArcs(arcs : OrderedSet(Arc)) post (trim()) ]
	[for (a : Arc | arcs)][a.source.name/][if (a.kind = ArcKind::read)]?[a.jetons/][elseif (a.jetons > 1)]*[a.jetons/] [else] [/if][/for]
[/template]

[template public OutArcs(arcs : OrderedSet(Arc)) post (trim()) ]
	[for (a : Arc | arcs)][a.target.name/][if (a.jetons > 1)]*[a.jetons/] [else] [/if][/for]
[/template]