import 'SimplePDL.ecore'

package simplepdl


context Process
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()

--deux activités différentes d’un même processus ne peuvent pas avoir le même nom.
	
context WorkDefinition
inv uniqueWD : self.Process.processElements
	->select(p | p.oclIsKindOf(WorkDefinition))
	->collect(p | p.oclAsType(WorkDefinition))
	-> forAll (a | self = a or self.name <> a.name)
	
	
--une dépendance ne peut pas être réflexive	
context WorkSequence
inv nonReflexive :
	self.predecessor <> self.successor
	
--le nom d’une activité doit être composé d’au moins deux caractères.
context WorkDefinition
inv twoCaracters : if self.name.oclIsUndefined() then false
					else self.name.size() >= 2
					endif
	
--le nom d’une activité ne doit être composé que de lettres, chiffres ou soulignés, un chiffre
--ne peut pas être première position.	
context WorkDefinition 
inv nameStructure : 
self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

-- Deux ressources d'un même processus ne peuvent pas avoir le même nom
context Ressource 
inv uniqueRessource :self.Process.processElements
	->select(p | p.oclIsKindOf(Ressource))
	->collect(p | p.oclAsType(Ressource))
	-> forAll (a | self = a or self.name <> a.name)
	
-- le nombre d'occurence ne peut pas depasser la qtté totale d'une ressource 
context Amount 
inv occMax : self.value <=  self.amount.quantity 

/* La quantité initiale d'une ressource doit être non nulle */
context Ressource
inv validQtty: self.quantity > 0


endpackage


